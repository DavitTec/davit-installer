# git-cliff ~ configuration file
# cliff.toml 
# Version:0.0.3
# This is a Private REPO
#TODO:#013-2  ERROR git_cliff_core::remote    > Request error: {"message":"Not Found","documentation_url":"https://docs.github.com/rest/commits/commits#list-commits","status":"404"}

[remote.github] 
owner = "DavitTec"
repo = "davit-installer"
token = "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"  # Add your GitHub Personal Access Token here for authentication
# ref: https://toml.io/en/v1.0.0

[changelog]
header = """\


# Changelog
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
All notable changes to the [<GITHUB_REPO>](<REPO>) project will be documented in this file.
- GitHub: [<REPO>](<REPO>),

---
"""
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }} ([{{ version }}](<REPO>/releases/tag/{{ version }}))
{% else %}\

    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }} ({{ commit.id | truncate(length=7) }})
    {% endfor %}
{% endfor %}
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

"""
footer = ""
# Remove leading and trailing whitespaces from the changelog's body.
trim = true

# Render body even when there are no releases to process.
render_always = true

postprocessors = [
    # Replace the placeholder <REPO> with a URL.
    { pattern = '<REPO>', replace = "<GITHUB_URL>/<GITHUB_USER>/<GITHUB_REPO>" },
    { pattern = '<GITHUB_URL>', replace = "https://github.com" },
    { pattern = '<GITHUB_USER>', replace = "DavitTec" },
    { pattern = '<GITHUB_REPO>', replace = "davit-installer" },

]

# output file path
output = "CHANGELOG.md"

[git]
# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org


tag_pattern = "v*"
conventional_commits = true
# Exclude commits that do not match the conventional commits specification.
filter_unconventional = true
# Require all commits to be conventional.
# Takes precedence over filter_unconventional.
require_conventional = false
# Split commits on newlines, treating each line as an individual commit.
split_commits = false
# An array of regex based parsers to modify commit messages prior to further processing.
commit_preprocessors = [
    # Replace issue numbers with link templates to be updated in `changelog.postprocessors`.
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))" },
    # Check spelling of the commit message using https://github.com/crate-ci/typos.
    # If the spelling is incorrect, it will be fixed automatically.
    #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
# Prevent commits that are breaking from being excluded by commit parsers.
protect_breaking_commits = false
# An array of regex based parsers for extracting data from the commit message.
# Assigns commits to groups.
# Optionally sets the commit's scope and can decide to exclude commits from further processing.
commit_parsers = [
    { message = "^feat", group = "🚀 Features" },
    { message = "^fix", group = "🐛 Bug Fixes" },
    { message = "^doc", group = "📚 Documentation" },
    { message = "^perf", group = "⚡ Performance" },
    { message = "^refactor", group = "🚜 Refactor" },
    { message = "^style", group = "🎨 Styling" },
    { message = "^test", group = "🧪 Testing" },
    { message = "^chore\\(deps.*\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore|^ci", group = "⚙️ Miscellaneous Tasks" },
    { message = "^Add.*\\.md$", group = "📚 Documentation" },
    { message = "^Add.*", group = "🚀 Features" },
    { body = ".*", group = "💼 Other" },
]
# Exclude commits that are not matched by any commit parser.
filter_commits = false
# An array of link parsers for extracting external references, and turning them into URLs, using regex.
link_parsers = []
# Include only the tags that belong to the current branch.
use_branch_tags = false
# Order releases topologically instead of chronologically.

topo_order = true

# Order releases topologically instead of chronologically.
topo_order_commits = true
# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest

sort_commits = "newest"

# Process submodules commits
recurse_submodules = false
